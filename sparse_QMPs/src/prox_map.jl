struct Pm_mem
    nk_1::Matrix{Float64}
    nk_2::Matrix{Float64}
    m::Vector{Float64}
    Œ≥x::Vector{Float64}
    Œ≥y::Vector{Float64}
    Œ≥x_new::Vector{Float64}
end

function Pm_mem(n::Int64, k::Int64, m::Int64)
    Pm_mem(
        zeros(n, k),
        zeros(n, k),
        zeros(m),
        zeros(m),
        zeros(m),
        zeros(m))
end

function prox_map(qmp::Problem, GÃÇ::Matrix{Float64}, lin_term::Vector{Float64},
    r::Float64, L::Float64, B::Float64, Œû::Matrix{Float64},
    ret::Matrix{Float64}, œµ::Float64, mem::Pm_mem;
    maxiter::Int=100000)
    #= 
        save œµ-minimizer of prox-map in ret.

        Use AGD on 
        max_{Œ¥ ‚àà B(0,r)} - ‚Äñ GÃÇ + ùí¢Œ¥ ‚Äñ¬≤ / (2L) + ‚ü®lin_term, Œ¥‚ü©

        assume
            GÃÇ = ‚àá‚ÇÇ q(Œ≥ÃÇ,Œû)
            B ‚â• ‚Äñ‚àá¬≤œà‚Äñ‚ÇÇ
            lin_term = (q·µ¢(Œû))·µ¢ - ùí¢·µÄGÃÇ / L
    =#


    if œµ < 1e-16
        println("œµ=$œµ too small in prox_map, setting œµ = 1e-16")
        œµ = 1e-16
    end

    L2œà = B^2 / L
    mem.Œ≥y .= mem.Œ≥x

    Œ± = 2 * 3 / (3 + sqrt(21))

    for tt = 0:maxiter
        # ==============
        # mem.m = ‚àáœà(Œ≥y) = - ùí¢·µÄ ùí¢ Œ≥y / L + lin_term
        # --------------
        ùí¢_rmul!(qmp, Œû, mem.nk_1, mem.Œ≥y, mem.nk_2)
        ùí¢·µÄ_rmul!(qmp, Œû, mem.m, mem.nk_1, mem.nk_2)
        mem.m .*= (-1.0 / L)
        mem.m .+= lin_term
        # ==============

        # ==============
        # Œ≥x_new = proj_{‚Äñ‚ãÖ‚Äñ ‚â§ r} Œ≥y + ‚àáœà(Œ≥y) / B
        # --------------
        mem.Œ≥x_new .= mem.Œ≥y .+ mem.m ./ L2œà

    	Œ≥x_new_norm = norm(mem.Œ≥x_new)
    	if Œ≥x_new_norm > r
    		mem.Œ≥x_new .*= (r / Œ≥x_new_norm)
    	end
        # ==============

        Œ±_new = (- Œ±^2 + sqrt(Œ±^4 + 4 * Œ±^2)) / 2
        Œ≤ = Œ± * (1 - Œ±) / (Œ±^2 + Œ±_new)

        mem.Œ≥y .= (1 + Œ≤) .* mem.Œ≥x_new .- Œ≤ .* mem.Œ≥x
        mem.Œ≥x .= mem.Œ≥x_new
        Œ± = Œ±_new

        # bound suboptimality
        if tt % 10 == 0
            # ==============
            # mem.m = ‚àáœà(Œ≥x_new) = - ùí¢·µÄ ùí¢ Œ≥x_new / L + lin_term
            # --------------
            ùí¢_rmul!(qmp, Œû, mem.nk_1, mem.Œ≥x_new, mem.nk_2)
            ùí¢·µÄ_rmul!(qmp, Œû, mem.m, mem.nk_1, mem.nk_2)
            mem.m .*= (-1.0 / L)
            mem.m .+= lin_term
            # ==============

            primal_subopt = r * norm(mem.m) - dot(mem.m, mem.Œ≥x_new)

            if primal_subopt <= œµ
                break
            end
        end
    end

    # ==========
    # ret = Œû - (GÃÇ + ùí¢ Œ≥x_new) / L
    # ----------
    ùí¢_rmul!(qmp, Œû, mem.nk_1, mem.Œ≥x, mem.nk_2)
    ret .= Œû .- (1.0 / L) .* (GÃÇ .+ mem.nk_1)

    # ==========
end